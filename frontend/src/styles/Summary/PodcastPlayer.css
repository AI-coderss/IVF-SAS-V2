:root {
  --base-color: #f1f6fd;
  --bg-color: #f2f2f2;
  --light-color: #fff;
  --shadow-color: rgb(0 0 0 / 15%);
  --dark-color: #d6d6d6;
  --text-color: #000;
  --primary-color:  #007bff;
    --primary-color-dark:  #007bff;
    --primary-symbol-color: #fff;
}

.player {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  background-color: var(--bg-color);
  width: 240px;
  max-height: 420px;
  margin: 48px;
  padding: 48px;
  border-radius: 48px;
/*   border: 1px solid color-mix(in srgb, var(--text-color) 20%, var(--bg-color)); */
  box-shadow: 0 -20px 20px 0px color-mix(in srgb, var(--light-color) 40%, var(--bg-color)), 0 12px 20px 2px color-mix(in srgb, var(--bg-color) 40%, var(--shadow-color));
}

.player-buttons {
  display: flex;
  gap: 16px;
  justify-content: center;
  align-items: center;
}

.play-button {
  height: 52px;
  width: 52px;
  border-radius: 50%;
  background: linear-gradient(180deg, var(--primary-color-dark), var(--primary-color) 70%);
  border: 4px solid color-mix(in srgb, var(--primary-color-dark), var(--primary-color));
}

.play-button:active {
  box-shadow: none;
}

.album-art-container {
  width: 100%;
  aspect-ratio: 1/1;
  background-color: #000;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  margin-bottom: 8px;
}

.album-art {
  height: 100%;
  width: 100%;
  object-fit: contain;
}

.seeker-container {
  margin-block: 8px;
  width: 100%;
}

.seeker-timestamps {
  display: flex;
  justify-content: space-between;
}

.marquee-container {
  overflow: hidden;
  max-width: 100%;
}

.marquee-container > * {
  display: inline-block;
  white-space: nowrap;
}

.marquee-content {
  position: relative;
}

.track-title {
  font-weight: 600;
}

.authors {
  font-size: 0.8em;
}



svg {
  aspect-ratio: 1/1;
  height: 19px;
  width: 19px;
  fill: var(--primary-symbol-color);
  margin: 2px 0 0 1px; /* I'm not fond of this code, but it fixes the awkward offset error. I'll come back to this later */
}

/*
Inspiration for styling input[type=range]: https://codepen.io/ShadowShahriar/pen/zYPPYrQ
This is neatly coded, and very close to the styles I wanted to implement
*/

input[type="range"] {
	font-size: 1.5rem;
	width: 100%;
  cursor: pointer;
}

input[type="range"] {
	color: var(--primary-color);
	--thumb-height: 0.5em;
	--track-height: 0.125em;
	--track-color: var(--dark-color);
	--brightness-hover: 180%;
	--brightness-down: 80%;
	--clip-edges: 0.125em;
}

input[type="range"] {
	position: relative;
	background: #fff0;
	overflow: hidden;
}

input[type="range"]:active {
	cursor: grabbing;
}

input[type="range"]:disabled {
	filter: grayscale(1);
	opacity: 0.3;
	cursor: not-allowed;
}

/* === WebKit specific styles === */
input[type="range"],
input[type="range"]::-webkit-slider-runnable-track,
input[type="range"]::-webkit-slider-thumb {
	-webkit-appearance: none;
	transition: all ease 100ms;
	height: var(--thumb-height);
}

input[type="range"]::-webkit-slider-runnable-track,
input[type="range"]::-webkit-slider-thumb {
	position: relative;
}

input[type="range"]::-webkit-slider-thumb {
	--thumb-radius: calc((var(--thumb-height) * 0.5) - 1px);
	--clip-top: calc((var(--thumb-height) - var(--track-height)) * 0.5 - 0.5px);
	--clip-bottom: calc(var(--thumb-height) - var(--clip-top));
	--clip-further: calc(100% + 1px);
	--box-fill: calc(-100vmax - var(--thumb-width, var(--thumb-height))) 0 0
		100vmax currentColor;

	width: var(--thumb-width, var(--thumb-height));
	background: linear-gradient(currentColor 0 0) scroll no-repeat left center /
		50% calc(var(--track-height) + 1px);
	background-color: currentColor;
	box-shadow: var(--box-fill);
	border-radius: var(--thumb-width, var(--thumb-height));

	filter: brightness(100%);
	clip-path: polygon(
		100% -1px,
		var(--clip-edges) -1px,
		0 var(--clip-top),
		-100vmax var(--clip-top),
		-100vmax var(--clip-bottom),
		0 var(--clip-bottom),
		var(--clip-edges) 100%,
		var(--clip-further) var(--clip-further)
	);
}

input[type="range"]:hover::-webkit-slider-thumb {
	filter: brightness(var(--brightness-hover));
	cursor: grab;
}

input[type="range"]:active::-webkit-slider-thumb {
	filter: brightness(var(--brightness-down));
	cursor: grabbing;
}

input[type="range"]::-webkit-slider-runnable-track {
	background: linear-gradient(var(--track-color) 0 0) scroll no-repeat center /
		100% calc(var(--track-height) + 1px);
}

input[type="range"]:disabled::-webkit-slider-thumb {
	cursor: not-allowed;
}

/* === Firefox specific styles === */
input[type="range"],
input[type="range"]::-moz-range-track,
input[type="range"]::-moz-range-thumb {
	appearance: none;
	transition: all ease 100ms;
	height: var(--thumb-height);
}

input[type="range"]::-moz-range-track,
input[type="range"]::-moz-range-thumb,
input[type="range"]::-moz-range-progress {
	background: #fff0;
}

input[type="range"]::-moz-range-thumb {
	background: currentColor;
	border: 0;
	width: var(--thumb-width, var(--thumb-height));
	border-radius: var(--thumb-width, var(--thumb-height));
	cursor: grab;
}

input[type="range"]:active::-moz-range-thumb {
	cursor: grabbing;
}

input[type="range"]::-moz-range-track {
	width: 100%;
	background: var(--track-color);
}

input[type="range"]::-moz-range-progress {
	appearance: none;
	background: currentColor;
	transition-delay: 30ms;
}

input[type="range"]::-moz-range-track,
input[type="range"]::-moz-range-progress {
	height: calc(var(--track-height) + 1px);
	border-radius: var(--track-height);
}

input[type="range"]::-moz-range-thumb,
input[type="range"]::-moz-range-progress {
	filter: brightness(100%);
}

input[type="range"]:hover::-moz-range-thumb,
input[type="range"]:hover::-moz-range-progress {
	filter: brightness(var(--brightness-hover));
}

input[type="range"]:active::-moz-range-thumb,
input[type="range"]:active::-moz-range-progress {
	filter: brightness(var(--brightness-down));
}

input[type="range"]:disabled::-moz-range-thumb {
	cursor: not-allowed;
}
